#!/usr/bin/env node

'use strict';

process.title = 'OIPage';

const { exec } = require('child_process');
const { join } = require("path");
const { existsSync, lstatSync } = require("fs");
const { mergeOption } = require("vislite");
const { formatArgv } = require("./tools/format.js");

// 开发服务器
if (process.argv[2] === "serve") {

    let argvObj = formatArgv(process.argv, {
        "-p": "--port",
        "-c": "--config"
    });

    let config = {
        devServer: {
            port: 8080,
            baseUrl: "./",
            intercept: []
        },
        module: {
            rules: []
        }
    };

    // 如果设置了配置文件
    if (argvObj["--config"]) {
        let configPath = join(process.cwd(), argvObj["--config"][0] || "./oipage.config.js");
        if (existsSync(configPath) && !lstatSync(configPath).isDirectory()) {
            let configValue = require(configPath);
            mergeOption(config, configValue);
        } else {
            console.log("\x1b[0m\x1b[31m" + configPath + "\x1b[0m");
            throw new Error("OIPage: The configuration file does not exist or is not a file.");
        }
    }

    if ((argvObj["--port"] || [])[0]) config.devServer.port = (argvObj["--port"] || [])[0];
    if ((argvObj["--baseUrl"] || [])[0]) config.devServer.baseUrl = (argvObj["--baseUrl"] || [])[0];

    require("./serve.js")(config);
}

// 磁盘操作
else if (process.argv[2] === "disk") {

    let argvObj = formatArgv(process.argv, {
        "-f": "--force",
        "-d": "--delete",
        "-m": "--move",
        "-c": "--copy"
    }, true);

    require("./disk.js")(argvObj);
}

// 运行多命令
else if (process.argv[2] === "run") {

    let argvObj = formatArgv(process.argv, {});

    for (let index = 0; index < argvObj.args.length; index++) {
        const child = exec(argvObj.args[index]);

        // 监听子线程的stdout
        child.stdout.on('data', (data) => {
            console.log(`[${index + 1}] log:${data}`);
        });

        // 监听子线程的stderr
        child.stderr.on('data', (data) => {
            console.error(`[${index + 1}] error:${data}`);
        });

        // 子线程结束处理
        child.on('close', (code) => {
            console.log(`[${index + 1}] 子线程结束，退出码 ${code}`);
        });

        // 子线程出错处理
        child.on('error', (error) => {
            console.error(`[${index + 1}] 子线程错误: ${error.message}`);
        });
    }

}

// 默认，帮助
else {
    require("./help.js")();
}